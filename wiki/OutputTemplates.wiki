#summary Tempita templating for output formatting.
<wiki:toc />

= Introduction =
One of the output formatting options described on the RtControlExamples page are Tempita templates. Compared to the other options, they offer more versatile formatting because you can use conditionals and loops, e.g. coloring the output based on some value thresholds (see the example below). A full description of the Tempita language can be found in its [http://pythonpaste.org/tempita/#the-language documentation].

Note that in order for them to be recognized as such, Tempita templates *MUST* start with two braces `{{`, use `{{#}}` (an empty template comment) if you want to start the output with some literal text.

= Using Tempita to format single items =
The most common form of using Tempita for formatting a single output item of a `rtcontrol` result is probably by defining it in the configuration as a custom format, so it can be simply used by its name. 

The `colored` predefined format is a typical example:
{{{
colored     = {{default ESC = '\x1B'}}{{d.size|sz}} {{d.uploaded|sz}} {{# 
    }}{{if d.seedtime < 8*7*86400}}{{ESC}}[36m{{d.seedtime|duration}}{{ESC}}[0m{{else}}{{d.seedtime|duration}}{{endif}}{{# 
    }}{{if d.ratio < 0.8}}{{ESC}}[1m{{ESC}}[31m{{elif d.ratio < 1.0}}{{ESC}}[36m{{elif type(d.ratio) is float}}{{ESC}}[32m{{endif}}{{#
    }} {{str(pc(d.ratio)).rjust(8)}}{{chr(37)}}{{if type(d.ratio) is float}}{{ESC}}[0m{{endif}}{{#
    }} {{(d.alias or '').ljust(8)}} {{d.name or ''}}
}}}

The main reason to use Tempita here are the if conditions that color the output depending on threshold values, for the ratio and seed time columns. 
Additionally to what Tempita provides, the global namespace of the template contains the usual format specifiers (see the output of the `--help-fields` option), and the current result item as `d` (think *`d`*ownload item).

Notable here is also the use of a named default value `ESC`, and using template comments `{{#}}` to escape the line endings we don't want to have in the final output, which looks like this:
 https://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/examples/rtcontrol-colors.png


= Using Tempita for full output control =
If you use the `--output-template` option of `rtcontrol`, flow control of presenting the query result is passed fully to a Tempita template. That means that in addition to iterating over the query result, you can also show any value available via the RTorrent XMLRPC connection, since the proxy object that allows access to the client is passed to the template.

This example shows the output of such a template that resembles the `rtorstat` output:
|| https://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/examples/rtorstat.png ||

To generate a similar result with your installation, follow these steps after updating it:
 1. Call `pyroadmin --create-config` to copy the builtin `rtorstat.html` template to your configuration.
 1. Call `rtcontrol -qO rtorstat.html done=-100 OR xfer=+0 -sdone >/var/www/cron/rtorrent.html` to create a HTML page.
 1. Open that page in your browser.

You can add the command from step #2 as a cronjob and always have a current status display; instead of copying to the local web server space, you could also put the output into your Dropbox folder to have a status display on your mobile gear.

The namespace of these templates is populated with the following objects:
 * `version` = the version of PyroScope
 * `proxy` = the client proxy
 * `view` = the view that was queried
 * `query` = the query conditions
 * `matches` = the query result