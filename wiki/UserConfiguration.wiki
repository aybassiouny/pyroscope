#summary PyroScope configuration.
#labels configuration,installation,cli

<wiki:toc />

= Introduction =

After you installed the software as outlined on QuickStartGuide, you need to add personal configuration that is loaded from the directory `~/.pyroscope` containing the files `config.ini` and `config.py`. A default set can be automatically created for you, see below for details.

*IMPORTANT: For a fresh installation in addition to an existing rTorrent one, you will also need to follow the "migration" instructions further below, which fill in some data your already running rTorrent instance is missing otherwise.*

For simple setups, you only need to edit the plain text file `config.ini`. The script `config.py` allows much more detailed control over complex setups, at the price of you knowing at least the basics of the Python programming language.

If you have any problems with or questions about your configuration, subscribe to the [http://groups.google.com/group/pyroscope-users pyroscope-users] mailing list to get help from the community, or join the inofficial <a href="irc://irc.freenode.net/rtorrent">`#rtorrent`</a> channel on `irc.freenode.net`.


= Creating a set of default configuration files =

To create your own configuration, the best way is to start from the default files that are part of your PyroScope installation. To create them at the default location `~/.pyroscope`, simply call this command:
{{{
pyroadmin --create-config
}}}
Note that you can delete anything you don't want changed, since the defaults are _always_ loaded first. Deleting unchanged defaults has the advantage that on software updates, you'll automatically get the newer version of settings, if they're updated.

If you need several distinct configuration sets, just add the `--config-dir` option like so:
{{{
pyroadmin --create-config --config-dir ~/rtorrent/special/.pyroscope
}}}

To view your configuration, use this (again, use the `--config-dir` option for non-default configurations):
{{{
pyroadmin --dump-config
}}}


= Setting values in `config.ini` =

The configuration file consists of sections, led by a `[section]` header and followed by `name: value` entries; `name = value` is also accepted. Longer values can be broken into several lines and the continuation lines must be indented (start with a space). Note that leading whitespace is removed from values. 

Lines beginning with a semicolon (`;`), a hash mark (`#`), or the letters `REM` (uppercase or lowercase) will be ignored and can be used for comments. You cannot put a comment on an option line, a comment *MUST* start the beginning of a line!

As an example, this is a very minimal configuration file: 
{{{
# PyroScope configuration file

[GLOBAL]
# Note that the "config_dir" value is provided by the system!
config_script = %(config_dir)s/config.py
rtorrent_rc = ~/.rtorrent.rc

[ANNOUNCE]
# Add alias names for announce URLs to this section; those aliases are used
# at many places, e.g. by the "mktor" tool

# Public trackers
PBT     = http://tracker.publicbt.com:80/announce
          udp://tracker.publicbt.com:80/announce
OBT     = http://tracker.openbittorrent.com:80/announce
          udp://tracker.openbittorrent.com:80/announce
Debian  = http://bttracker.debian.org:6969/announce
}}}

_For advanced users:_ Values can contain format strings of the form `%(name)s` which refer to other values in the same section, or values in the `[DEFAULT]` section.

= Extending your `.rtorrent.rc` =

You need either a `scgi_local` or `scgi_port` specification in your rTorrent configuration; `scgi_local` is preferable since more secure. Furthermore, you need to provide the path to a `session` directory. See the [http://libtorrent.rakshasa.no/rtorrent/rtorrent.1.html rTorrent man page] for details.

For the `loaded` and `completed` fields to work (added in version 0.3.4), as well as the `started`, `leechtime` and `seedtime` ones, you also have to add this:
{{{
#
# PyroScope SETTINGS
#

# VIEW: Default view for filtering results
view_add = rtcontrol

# VIEW: Show active torrents (in view #9) and update every 20 seconds
schedule = filter_active,20,20,"view_filter = active,\"or={d.get_up_rate=,d.get_down_rate=}\""

# EVENTS: Timestamps
#   tm_loaded = time loaded into client
#   tm_started = time of *first* start
#   tm_completed = time of completion
system.method.insert = pyro.tm_started.now,simple|private,"d.set_custom=tm_started,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.resumed,time_stamp,"branch=d.get_custom=tm_started,false=,pyro.tm_started.now="
system.method.set_key = event.download.inserted_new,time_stamp,"d.set_custom=tm_loaded,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.finished,time_stamp,"d.set_custom=tm_completed,$cat=$system.time= ;d.save_session="

# EVENTS: Activation intervals
system.method.insert = pyro.activations.append,simple|private,"d.set_custom=activations,\"$cat=$d.get_custom=activations,$argument.0=,$system.time=\" ;d.save_session="
system.method.set_key = event.download.paused,activations,"pyro.activations.append=P"
system.method.set_key = event.download.resumed,activations,"pyro.activations.append=R"

# COMMAND: Return startup time (can be used to calculate uptime)
system.method.insert = startup_time,value,$system.time=

# COMMAND: Remove current item and its data
system.method.insert = cull,simple,"execute_nothrow=rtcontrol,-q,--detach,--cull,--yes,\"$cat=hash=,$d.get_hash=\""
}}}

*Note that if you just freshly installed PyroScope into an existing rTorrent installation, you must also follow the "migration" instructions below to add missing data to your already loaded downloads. Else, those items will NOT be filtered correctly.*

BTW, given these extensions, you can also sort your `main` view by completion time:
{{{
# Show recently completed top-most in "main"
view_sort_current = main,greater=d.get_custom=tm_completed
view_filter_on = main,event.download.finished
}}}


= Modifying and extending your configuration via `config.py` =

== Defining your own custom fields ==
To add user-defined fields in addition to the built-in ones, you can put code like this into your `~/.pyroscope/config.py` file (you need at least version 0.3.4 of `pyrocore`):
{{{
def _custom_fields():
    """ Yield custom field definitions.
    """
    import os
    from pyrocore.torrent import engine, matching
    from pyrocore.util import fmt

    def has_nfo(obj):
        "Check for .NFO file."
        pathname = obj.path
        if pathname and os.path.isdir(pathname):
            return any(i.lower().endswith(".nfo") for i in os.listdir(pathname))
        else:
            return False if pathname else None

    def has_thumb(obj):
        "Check for folder.jpg file."
        pathname = obj.path
        if pathname and os.path.isdir(pathname):
            return any(i.lower() == "folder.jpg" for i in os.listdir(pathname))
        else:
            return False if pathname else None

    def get_tracker_field(obj, name):
        "Get a field from tracker in focus."
        idx = obj.fetch("tracker_focus") % obj._fields["tracker_size"]
        return getattr(obj._engine._rpc.t, name)(obj._fields["hash"], idx)

    # Add file checkers
    yield engine.DynamicField(engine.untyped, "has_nfo", "does download have a .NFO file?", 
        matcher=matching.BoolFilter, accessor=has_nfo, 
        formatter=lambda val: "NFO" if val else "!DTA" if val is None else "----")
    yield engine.DynamicField(engine.untyped, "has_thumb", "does download have a folder.jpg file?", 
        matcher=matching.BoolFilter, accessor=has_thumb, 
        formatter=lambda val: "THMB" if val else "!DTA" if val is None else "----")

    # Add rTorrent attributes not available by default
    yield engine.OnDemandField(int, "peers_connected", "number of connected peers", matcher=matching.FloatFilter)
    yield engine.DynamicField(int, "seeds", "number of seeds", matcher=matching.FloatFilter,
        accessor=lambda o: get_tracker_field(o, "get_scrape_complete"))
    yield engine.DynamicField(int, "leeches", "number of leeches", matcher=matching.FloatFilter,
        accessor=lambda o: get_tracker_field(o, "get_scrape_incomplete"))
    yield engine.DynamicField(engine.untyped, "lastscraped", "time of last scrape", matcher=matching.TimeFilter,
        accessor=lambda o: get_tracker_field(o, "get_scrape_time_last"), 
        formatter=lambda dt: fmt.human_duration(float(dt), precision=2, short=True))

# Register our factory with the system
custom_field_factories.append(_custom_fields)
}}}

After you did that, you can use your custom field just like any built-in one, e.g. issue a command like `rtcontrol size=+4g -q -ohas_nfo,name`. They're also listed when you call `rtcontrol --help-fields`.


= Updating your existing configuration for a new software version =

After you installed a new version of the software, you can easily check whether the default configuration files changed by calling the `pyroadmin --create-config` command. Since this will never overwrite existing configuration files, the files `config.ini.default` and `config.py.default` will be created instead.

You can then use the `diff` tool to check for the differences between your current configuration and the new default one, and add any changes you want to adopt.

And remember to *always read the [http://pyroscope.googlecode.com/svn/trunk/debian/changelog changelog]*!

== Migrating to version 0.3.4 ==
*NOTE: These instructions also apply if you freshly installed version 0.3.4 or higher!*

To fully make use of the new features, you need to do the following:
  # Read and follow the section _Extending your `.rtorrent.rc`_ from above and restart rTorrent.
  # To add the new custom keys to your existing session data, call these commands in a shell: 
{{{
# Make a full, current backup of the session data
rtxmlrpc -q session_save
tar cvfz ~/session-backup-0.3.4.tgz $(echo $(rtxmlrpc get_session)/ | tr -s / /)*.torrent

# Set missing "loaded" times to that of the .torrent file
rtcontrol '!*"*' loaded=0 -q -sname -o 'echo "$(name)s"\ntest -f "$(metafile)s" && rtxmlrpc -q d.set_custom $(hash)s tm_loaded \$(\
    ls -l --time-style "+%%s" "$(metafile)s" \
    | cut -f6 -d" ")\nrtxmlrpc -q d.save_session $(hash)s' | bash

# Set missing "completed" times to that of the data file or directory
rtcontrol '!*"*' completed=0 path=\! is_ghost=no -q -sname -o 'echo "$(name)s"\ntest -e "$(realpath)s" && rtxmlrpc -q d.set_custom $(hash)s tm_completed \$(\
    ls -ld --time-style "+%%s" "$(realpath)s" \
    | cut -f6 -d" ")\nrtxmlrpc -q d.save_session $(hash)s' | bash
}}}
  # Call `pyroadmin --create-config` and check your `config.ini` against `config.ini.default` as described above. Among other things, the default `output_format` has changed.
  # The command "`rtcontrol completed=-1d -scompleted`" should now show your completed downloads of the last 24 hours, in order.
  # Enjoy.

== Migrating to version 0.3.6 ==
To fully make use of the new features, you need to change your rTorrent configuration and execute a few commands. Users that did *not* yet follow the 0.3.4 migration instructions should do so *first*.

*NOTE: These instructions also apply if you freshly installed version 0.3.6 or higher!*

After you're "on the 0.3.4 level", this will get you ready for 0.3.6:
  # Make a full, current backup of the session data:
{{{
rtxmlrpc -q session_save
tar cvfz ~/session-backup-0.3.6.tgz $(echo $(rtxmlrpc get_session)/ | tr -s / /)*.torrent
}}}
  # Read and follow the section _Extending your `.rtorrent.rc`_ from above and restart rTorrent. Users that already added the extensions for previous versions should replace the relevant parts of their configuration with the new snippets.
  # Call `pyroadmin --create-config` and check your `config.ini` against `config.ini.default` as described above. Among other things, some output formats have changed.
  # The command "`rtcontrol \* -qostarted | sort | uniq -c`" should now, for the majority of your torrents, show the start time of rTorrent after adding the `tm_started` configuration bits (cf. step 2, stopped ones will get counted under `1970-01-01`).
  # Assuming you have incomplete torrents, "`rtcontrol is_complete=0 -ostarted.raw.delta,leechtime,name --column-headers`" should show identical values in the `STARTED` and `LEECHTIME` columns.
  # Enjoy.


== Migrating to version 0.4.1 ==
There is a new dependency on the `pyrobase` package, and for *release version installations*, it will be managed transparently — you have nothing to worry about, just follow the updating instructions from InstallReleaseVersion, and then see below for the required steps after updating.

On the other hand, if you have an *installation from source*, it's important that you add the new dependency _also_ from source, because otherwise your installation will break during further development (since then, you'd remain on the _released_ version of `pyrobase`). So, call these commands (assuming the standard installation paths):
{{{
cd ~/lib/pyroscope
source bin/activate
svn update
git clone git://github.com/pyroscope/pyrobase.git pyrobase
( cd pyrocore && source bootstrap.sh )
}}}

In addition, follow these steps:
 # You *must* add the new `startup_time` command, and you _should_ add the `cull` command (see "Extending your `.rtorrent.rc`" above).
 # Call `pyroadmin --create-config` to add the new builtin [OutputTemplates Tempita templates] to your configuration.
 # To get bash completion for the PyroScope commands, source the file `~/.pyroscope/bash-completion` in your `~./bashrc`, or copy it to `/etc/bash_completion.d/pyrocore`.
