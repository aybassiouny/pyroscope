#summary How to compile and configure rTorrent + PyroScope on Debian.
#labels installation
<wiki:toc max_depth="2" />

= Introduction =

The following shows installation instructions for a working rTorrent instance in combination with PyroScope *from scratch*, on Debian Server 5.0 (Lenny). While the package names and the use of `aptitude` are somewhat dependant on (that version of) Debian, the commands for other distributions are similar, and the compilation instructions should work as-is on practically any Linux.

Non-packaged software is installed exclusively into your normal user account, i.e. this description works OK for non-root users as long as the required packages are installed before-hand. The default install location is `~/lib/rtorrent-«version»`, which means you can easily delete any installed software, and also run several versions concurrently.

Most of the command blocks can be cut & pasted wholesale into a terminal. Note that `bash` _here documents_ (`... <<'EOF'`) *MUST* be pasted at once.


= Preparatory steps =
First, you need to install a few required packages — these are the only steps that must be performed by the `root` user:
{{{
aptitude install screen wget build-essential subversion git-core \
    python-setuptools python-virtualenv python-dev \
    libsigc++-2.0-dev libssl-dev \
    libncurses-dev libncursesw5-dev libcppunit-dev \
    autoconf automake libtool
}}}

Note that you can always show Debian's current build dependencies for rTorrent using the command
{{{
echo $(apt-cache showsrc rtorrent libtorrent-dev | grep Build-Depends: | cut -f2 -d: | tr ",)" " \\n" | cut -f1 -d"(")
}}}

If you later want to use trackers with `https` announce URLs, this script is useful to easily add the needed certificates to the system:
{{{
cat >/usr/local/sbin/load-domain-certificate <<'EOF'
#! /bin/bash
if test -z "$1"; then
    echo "usage: $0 <domainname_or_url>"
    exit 1
fi
DOMAINNAME=$(sed -re 's%^(https://)?([^/]+)(.*)$%\2%' <<<$1)
set -x
openssl s_client -connect ${DOMAINNAME}:443 </dev/null | tee /tmp/${DOMAINNAME}.crt
openssl x509 -inform PEM -in /tmp/${DOMAINNAME}.crt -text -out /usr/share/ca-certificates/${DOMAINNAME}.crt
grep ${DOMAINNAME}.crt /etc/ca-certificates.conf >/dev/null || echo ${DOMAINNAME}.crt >>/etc/ca-certificates.conf
update-ca-certificates
ls -l /etc/ssl/certs | grep ${DOMAINNAME}
EOF
chmod a+x /usr/local/sbin/load-domain-certificate
}}}


= rTorrent installation =
Download the [http://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/rtorrent-extended/build.sh build script] to a location of your choosing and then call it with the `all` parameter; the script will then download, build, and install all necessary components, storing temporary files in the current directory. You can pass the `clean_all` parameter to remove those temporary files later on, after everything works.

*⚠ Be sure to select the version of rTorrent you want to compile, as determined by the settings at the start of the script. If you have no preference otherwise, stick to the stable 0.8.6 release.*

{{{
# Run this in your NORMAL user account!
mkdir -p ~/src/; cd ~/src/
svn co http://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/rtorrent-extended
cd rtorrent-extended

# check the VERSION SELECTION at the top of the script, and edit as needed, then...
./build.sh all
}}}

If you want an extended version with some patches applied, call this command in addition:
{{{
./build.sh extend
}}}

  http://i.imgur.com/xCd8z.png

Note that the unpatched version is still available as `rtorrent-vanilla`, and you can simply switch by changing the symlink in `~/bin`, or by calling either version with its full path. See RtorrentExtended for more details on the changes applied. 

 ✪ _If you use the configuration as outlined in the next section, do not forget to set the value of `pyro.extended` to 1!_


= rTorrent configuration =
To be able to use several different instances of rTorrent (e.g. a second one for experimental configuration changes), this setup doesn't use `~/.rtorrent.rc` at all, but keeps everything in one place under the `~/rtorrent` directory. If you change the assignment to `RT_HOME`, you can place it anywhere you like, or create alternate instances with ease.

First, create the instance directories and a simple start script:
{{{
export RT_HOME=$HOME/rtorrent
mkdir -p $RT_HOME/{.session,work,done,log,watch/start,watch/load}
cd $RT_HOME

# make simple start script
cat >./start <<'EOF'
#! /bin/bash
if [ "$TERM" = "${TERM%-256color}" ]; then
    export TERM="$TERM-256color"
fi
umask 0027
cd $(dirname $0)
rtorrent -n -o import=$PWD/rtorrent.rc
stty sane
EOF
chmod a+x ./start
}}}

Next, a not-so-simple `rtorrent.rc` is created, it already contains everything needed to use all features of PyroScope — you should check at least the first section and adapt the values to your environment. Note that most of the settings specific to PyroScope are read from a [http://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/rtorrent-086.rc provided include file].

{{{
sed -e "s:RT_HOME:$RT_HOME:" >$RT_HOME/rtorrent.rc <<'EOF'
### rtorrent settings #######################################################

#
# OPTIONAL settings (check these)
#

# general
upload_rate = 12000
download_rate = 12000
max_uploads = 50
max_uploads_global = 200
max_open_files = 512
max_open_sockets = 384
encryption = allow_incoming,try_outgoing,enable_retry
umask = 0027
key_layout = qwertz
check_hash = no
##hash_interval = 100
##hash_max_tries = 2

# range for listening port
port_range = 64000-64042
port_random = no

# tracker-less torrent support
dht = disable
peer_exchange = no
use_udp_trackers = no

# peer settings
min_peers = 20
max_peers = 200
min_peers_seed = -1
max_peers_seed = -1

# resource usage
max_memory_usage = 734003200
xmlrpc_size_limit = 1048576


#
# CORE settings (keep these)
#
http_capath = /etc/ssl/certs
encoding_list = utf8

directory = RT_HOME/work
session = RT_HOME/.session
scgi_local = RT_HOME/.scgi_local
##scgi_port = localhost:5099
log.execute = RT_HOME/log/execute.log

# SCHEDULE: Watch directories
schedule = watch_start_directory,10,10,load_start=RT_HOME/watch/start/*.torrent
schedule = watch_load_directory,15,20,load=RT_HOME/watch/load/*.torrent
schedule = untied_closing,30,30,close_untied=

# SCHEDULE: Watch disk space
schedule = low_diskspace,15,60,close_low_diskspace=1000M

# SCHEDULE: Make SCGI socket group-writable
schedule = scgi_permission,0,0,"execute=chmod,g+w,RT_HOME/.scgi_local"

# UI/VIEW: Sort "seeding" by ratio
view_sort_current = seeding,greater=d.get_ratio= 

# UI/VIEW: Show current messages
view_add = messages
view_filter = messages,d.get_message=
view_sort_current = messages,less=d.get_message= 
##view_sort_current = messages,"compare=,d.get_message=,d.get_name="
system.method.insert = ui.messages.show,simple,"ui.current_view.set=messages ;view_filter=messages,d.get_message= ;view_sort=messages ;print=$view.size=messages,\" messages!\""
##schedule = bind_8,0,0,"ui.bind_key=download_list,8,ui.messages.show="

# EVENTS: Logging (don't log "opened", or you get swamped at startup)
system.method.set_key = event.download.inserted_new,log,"print=\"LOADED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""
system.method.set_key = event.download.finished,log,"print=\"COMPLETED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""
system.method.set_key = event.download.closed,log,"print=\"CLOSED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""


#
# PyroScope SETTINGS
#

# Set "pyro.extended" to 1 to activate rTorrent-PS features!
system.method.insert = pyro.extended,value,0

# Remove the ".default" if you want to change something (else your 
# changes get over-written on update).
import = ~/.pyroscope/rtorrent-086.rc.default

# UI/VIEW: Sort incomplete by date added
view_sort_current = incomplete,greater=d.get_custom=tm_loaded
view_filter_on = incomplete,event.download.inserted_new

# UI/VIEW: Show recently completed top-most in "main"
view_sort_current = main,greater=d.get_custom=tm_completed
view_filter_on = main,event.download.finished

### END rtorrent.rc #########################################################
EOF
}}}

If you intend to use rTorrent version 0.8.7 and up, you also need to [RtXmlRpcMigration run the migration script] on that configuration now.


= !PyroScope installation =
The installation of `pyrocore` is done from source, see InstallFromSource for more details.
{{{
mkdir -p ~/bin ~/lib
svn checkout http://pyroscope.googlecode.com/svn/trunk/ ~/lib/pyroscope
git clone git://github.com/pyroscope/pyrobase.git ~/lib/pyroscope/pyrobase
cd ~/lib/pyroscope/pyrocore
source bootstrap.sh
ln -nfs $(grep -l 'entry_point.*pyrocore==' ~/lib/pyroscope/bin/*) ~/bin/
cd
}}}
If your machine has no `virtualenv` command (i.e. no package that provides it), see [InstallToPythonVirtualenv this page] on how to work around that.


= !PyroScope configuration =
This adds a minimal configuration, so that the defaults are taken from the installed software, which makes later updates a lot easier.
{{{
pyroadmin --create-config

cat >~/.pyroscope/config.ini <<EOF
# PyroScope configuration file
#
# For details, see http://code.google.com/p/pyroscope/wiki/UserConfiguration
#

[GLOBAL]
# Location of your rtorrent configuration
rtorrent_rc = ~/rtorrent/rtorrent.rc

[ANNOUNCE]
# Add alias names for announce URLs to this section; those aliases are used
# at many places, e.g. by the "mktor" tool and to shorten URLs to these aliases
EOF
}}}


= First start and testing =

You're now ready to start your rtorrent, so just do it:
{{{
screen -S rtorrent $RT_HOME/start
}}}
You can of course add more elaborate start scripts, like a cron watchdog or init.d scripts, see the rTorrent wiki for examples.
After that, test the XMLRPC connection by using this command:
{{{
rtxmlrpc system.time_usec
}}}

Continue by reading the UserConfiguration and the RtControlExamples pages.