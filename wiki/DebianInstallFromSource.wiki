#summary How to compile and configure rTorrent + PyroScope on Debian.
#labels installation
<wiki:toc max_depth="2" />

= Introduction =

The following shows installation instructions for a working rTorrent instance in combination with PyroScope, on Debian Server 5.0 (Lenny). While the package names and the use of `aptitude` are somewhat dependant on (that version of) Debian, the commands for other distributions are similar, and the compilation instructions should work as-is on practically any Linux.

Non-packaged software is installed exclusively into your normal user account, i.e. this description works OK for non-root users as long as the required packages are installed before-hand. The default install location is `~/lib/rtorrent-«version»`, which means you can easily delete any installed software, and also run several versions concurrently.

Most of the command blocks can be cut & pasted wholesale into a terminal. Note that `bash` _here documents_ (`... <<'EOF'`) *MUST* be pasted at once.


= Preparatory steps =
First, you need to install a few needed packages, these are the only steps that need to be done as the `root` user:
{{{
aptitude install screen wget build-essential subversion git-core \
    python-setuptools python-virtualenv \
    libsigc++-2.0-dev libssl-dev \
    libncurses-dev libncursesw5-dev libcppunit-dev
}}}

Note that you can always show Debian's current build dependencies for rTorrent using the command
{{{
echo $(apt-cache showsrc rtorrent libtorrent-dev | grep Build-Depends: | cut -f2 -d: | tr ",)" " \\n" | cut -f1 -d"(")
}}}

If you later want to use trackers with `https` announce URLs, this script is useful to easily add the needed certificates to the system:
{{{
cat >/usr/local/sbin/load-domain-certificate <<'EOF'
#! /bin/bash
if test -z "$1"; then
    echo "usage: $0 <domainname_or_url>"
    exit 1
fi
DOMAINNAME=$(sed -re 's%^(https://)?([^/]+)(.*)$%\2%' <<<$1)
set -x
openssl s_client -connect ${DOMAINNAME}:443 </dev/null | tee /tmp/${DOMAINNAME}.crt
openssl x509 -inform PEM -in /tmp/${DOMAINNAME}.crt -text -out /usr/share/ca-certificates/${DOMAINNAME}.crt
grep ${DOMAINNAME}.crt /etc/ca-certificates.conf >/dev/null || echo ${DOMAINNAME}.crt >>/etc/ca-certificates.conf
update-ca-certificates
ls -l /etc/ssl/certs | grep ${DOMAINNAME}
EOF
chmod a+x /usr/local/sbin/load-domain-certificate
}}}


= rTorrent installation =
Download the [http://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/examples/build-rtorrent.sh build script] to a location of your choosing and then call it with the `all` parameter; the script will then download, build, and install all necessary components, storing temporary files in the current directory. You can pass the `clean_all` parameter to remove those temporary files later on, after everything works.

{{{
mkdir -p ~/src/rtorrent
cd ~/src/rtorrent
wget http://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/examples/build-rtorrent.sh
chmod a+x ./build-rtorrent.sh
./build-rtorrent.sh all
}}}

If you want an extended version with some patches applied, call this command in addition:
{{{
./build-rtorrent.sh extend
}}}
Note that the unpatched version is still available as `rtorrent-vanilla`, and you can simply switch by changing the symlink in `~/bin`, or by calling either version with its full path. 


= rTorrent configuration =
To be able to use several different instances of rTorrent (e.g. a second one for experimental configuration changes), this setup doesn't use `~/.rtorrent.rc` at all, but keeps everything in one place under the `~/rtorrent` directory. If you change the assignment to `RT_HOME`, you can place it anywhere you like, or create alternate instances with ease.

First, create the instance directories and a simple start script:
{{{
export RT_HOME=$HOME/rtorrent
mkdir -p $RT_HOME/{.session,work,done,log,watch/start,watch/load}
cd $RT_HOME

# make simple start script
cat >./start <<'EOF'
#! /bin/bash
umask 0027
cd $(dirname $0)
rtorrent -n -o import=$PWD/rtorrent.rc 
EOF
chmod a+x ./start
}}}

Next, a not-so-simple `rtorrent.rc` is created, it already contains everything needed to use all features of PyroScope — you should check at least the first section and adapt the values to your environment.
{{{
sed -e "s:RT_HOME:$RT_HOME:" >$RT_HOME/rtorrent.rc <<'EOF'
### rtorrent settings #######################################################

#
# OPTIONAL settings (check these)
#
upload_rate = 12000
download_rate = 12000
max_open_files = 512
max_open_sockets = 384
encryption = allow_incoming,try_outgoing,enable_retry
umask = 0027
key_layout = qwertz
check_hash = no
##hash_interval = 100
##hash_max_tries = 2

min_peers = 20
max_peers = 200
min_peers_seed = -1
max_peers_seed = -1
max_uploads = 50
max_uploads_global = 200
max_memory_usage = 734003200
xmlrpc_size_limit = 1048576


#
# CORE settings (keep these)
#
http_capath = /etc/ssl/certs
encoding_list = utf8
dht = disable
peer_exchange = no
use_udp_trackers = no

directory = RT_HOME/work
session = RT_HOME/.session
scgi_local = RT_HOME/.scgi_local
##schedule = scgi_permissions,0,0,"execute=chmod,660,RT_HOME/.scgi_local"
##scgi_port = localhost:5099
log.execute = RT_HOME/log/execute.log

# range for listening port
port_range = 64000-64042
port_random = no


# SCHEDULE: Watch directories
schedule = watch_start_directory,10,10,load_start=RT_HOME/watch/start/*.torrent
schedule = watch_load_directory,15,20,load=RT_HOME/watch/load/*.torrent
schedule = untied_closing,30,30,close_untied=

# SCHEDULE: Watch disk space
schedule = low_diskspace,15,60,close_low_diskspace=1000M

# SCHEDULE: Make SCGI socket group-writable
schedule = scgi_permission,0,0,"execute=chmod,g+w,RT_HOME/.scgi_local"

# VIEW: Sort "seeding" by ratio
view_sort_current = seeding,greater=d.get_ratio= 

# VIEW: Show active and incomplete torrents sorted by upload rate (in view #9) and update every 20 seconds
view_sort_current = active,greater=d.get_up_rate=
schedule = filter_active,20,20,"view_filter = active,\"or={d.get_up_rate=,d.get_down_rate=,not=$d.get_complete=}\" ;view_sort=active"

# VIEW: Show current messages (^X m=)
view_add = messages
view_filter = messages,d.get_message=
view_sort_current = messages,less=d.get_message= 
system.method.insert = m,simple,"ui.current_view.set=messages ;view_filter=messages,d.get_message= ;view_sort=messages ;print=$view.size=messages,\" messages!\""

# EVENTS: Logging (don't log "opened", or you get swamped at startup)
system.method.set_key = event.download.inserted_new,log,"print=\"LOADED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""
system.method.set_key = event.download.finished,log,"print=\"COMPLETED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""
system.method.set_key = event.download.closed,log,"print=\"CLOSED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""

# COMMAND: Return startup time (can be used to calculate uptime)
system.method.insert = startup_time,value,$system.time=


#
# PyroScope SETTINGS
#

# EVENTS: Timestamps
#   tm_loaded = time loaded into client
#   tm_started = time of *first* start
#   tm_completed = time of completion
system.method.insert = pyro.tm_started.now,simple|private,"d.set_custom=tm_started,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.resumed,time_stamp,"branch=d.get_custom=tm_started,false=,pyro.tm_started.now="
system.method.set_key = event.download.inserted_new,time_stamp,"d.set_custom=tm_loaded,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.finished,time_stamp,"d.set_custom=tm_completed,$cat=$system.time= ;d.save_session="

# EVENTS: Activation intervals
system.method.insert = pyro.activations.append,simple|private,"d.set_custom=activations,\"$cat=$d.get_custom=activations,$argument.0=,$system.time=\" ;d.save_session="
system.method.set_key = event.download.paused,activations,"pyro.activations.append=P"
system.method.set_key = event.download.resumed,activations,"pyro.activations.append=R"

# VIEW: Default view for filtering results
view_add = rtcontrol

# VIEW: Sort incomplete by date added
view_sort_current = incomplete,greater=d.get_custom=tm_loaded
view_filter_on = incomplete,event.download.inserted_new

# VIEW: Show recently completed top-most in "main"
view_sort_current = main,greater=d.get_custom=tm_completed
view_filter_on = main,event.download.finished

# VIEW: Use rtcontrol filter (^X s=KEYWORD, ^X t=TRACKER, ^X f="FILTER")
system.method.insert = s,simple,"execute_nothrow=~/bin/rtcontrol,--detach,-qV,\"$cat=*,$argument.0=,*\""
system.method.insert = t,simple,"execute_nothrow=~/bin/rtcontrol,--detach,-qV,\"$cat=\\\"alias=\\\",$argument.0=\""
system.method.insert = f,simple,"execute_nothrow=~/bin/rtcontrol,--detach,-qV,$argument.0="

# COMMAND: Housekeeping (delete item + data)
system.method.insert = purge,simple,"execute_nothrow=rtcontrol,-q,--detach,--purge,--yes,\"$cat=hash=,$d.get_hash=\""
system.method.insert = cull,simple,"execute_nothrow=rtcontrol,-q,--detach,--cull,--yes,\"$cat=hash=,$d.get_hash=\""

### END rtorrent.rc #########################################################
EOF
}}}

You're now ready to start your rtorrent, so just do that:
{{{
screen -S rtorrent $PWD/start
}}}
You can of course add more elaborate start scripts, like a cron watchdog or init.d scripts, see the rTorrent wiki for examples.


= !PyroScope installation =
The installation of `pyrocore` is done from source, see InstallFromSource for more details.
{{{
mkdir -p ~/bin ~/lib
svn checkout http://pyroscope.googlecode.com/svn/trunk/ ~/lib/pyroscope
git clone git://github.com/pyroscope/pyrobase.git ~/lib/pyroscope/pyrobase
cd ~/lib/pyroscope/pyrocore
source bootstrap.sh
ln -nfs $(grep -l 'entry_point.*pyrocore==' ~/lib/pyroscope/bin/*) ~/bin/
cd
}}}


= !PyroScope configuration =
This adds a minimal configuration, so that the defaults are taken from the installed software, which makes later updates a lot easier.
{{{
pyroadmin --create-config

cat >~/.pyroscope/config.ini <<EOF
# PyroScope configuration file
#
# For details, see http://code.google.com/p/pyroscope/wiki/UserConfiguration
#

[GLOBAL]
# Location of your rtorrent configuration
rtorrent_rc = ~/rtorrent/rtorrent.rc

[ANNOUNCE]
# Add alias names for announce URLs to this section; those aliases are used
# at many places, e.g. by the "mktor" tool and to shorten URLs to these aliases
EOF
}}}

Finally, test the XMLRPC connection by using this command:
{{{
rtxmlrpc system.time_usec
}}}

Continue by reading the UserConfiguration and the RtControlExamples pages.