#summary Real-world use-cases for rtcontrol.
#labels shell,cron
See also RtXmlRpcExamples.

_Contents_ <wiki:toc max_depth="2" />

= Fundamentals =
`rtcontrol`'s main purpose is to take filter conditions on the command line of the form "_field_`=`_value_" and select a set of torrents according to them. All given conditions must be met (AND), and if a field name is omitted, "`name`" is assumed.

For numeric fields, a leading "`+`" means greater than, a leading "`-`" means less 
than (just like with the standard `find` command). For string fields, the value is a glob pattern which you are used to from shell filename patterns (`*`, `?`, `[a-z]`, `[!a-z]`).
Multiple values separated by a comma indicate several possible choices (OR).
"`!`" in front of a filter value negates it (NOT).

In time filtering conditions (e.g. for the `completed` and `loaded` fields), you have three possible options to specify the value:
  # time deltas in the form "`<number><unit>...`", where unit is a single upper- or lower-case letter and one of `Y`ear, `M`onth, `W`eek, `D`ay, `H`our, m`I`nute, or `S`econd. The order is important (`y` before `m`), and a `+` before the delta means _older than_, while `-` means _younger than_. Example: `-1m2w3d`.
  # a certain date and time in human readable form, where the date can be given in ISO (`Y-M-D`), American (`M/D/Y`), or European (`D.M.Y`) format. A date can be followed by a time, with minutes and seconds optional and separated by `:`. Put either a space or a `T` between the date and the time. Example: `+2010-08-15t14:50`.
  # absolute numerical UNIX timestamp, i.e. what `ls -l --time-style '+%s'` returns. Example: `+1281876597`.


= Useful filter conditions =
The following conditions give you a hint on what you can do, and some building blocks for more complex conditions.

|| *Condition(s)*     || *Description* ||
|| `ratio=+1`         || All downloads seeded to at least 1:1 ||
|| `xfer=+0`          || All active torrents (transferring data) ||
|| `up=+0`            || All seeding torrents (uploading data) ||
|| `down=+0 down=-5k` || Slow torrents (downloading, but with < 5 KB/s) ||
|| `down=0 is_complete=no is_open=yes` || Stuck torrents ||
|| `size=+4g`         || Big stuff (DVD size or larger) ||
|| `is_complete=no`   || Incomplete downloads ||
|| `is_ghost=yes`     || Torrents that have no data (were never started or lost their data; _since v0.3.3_) ||
|| `alias=obt`        || Torrents tracked by `openbittorrent.com` (see UserConfiguration on how to add aliases for trackers) ||
|| `ratio=+1 realpath=\!/mnt/*` || 1:1 seeds not on a mounted path (i.e. likely on localhost) ||
|| `completed=+2w`    || Completed more than 2 weeks ago (_since v0.3.4_) ||
|| `tagged=`          || Not tagged at all (_since v0.3.5_) ||
|| `tagged=\!`         || Has at least one tag (_since v0.3.5_) ||
|| `tagged=foo`       || Tagged with "foo" (_since v0.3.5_) — tags are white-space separated lists in the custom attribute "tags" ||
|| `kind=flac,mp3`    || Music downloads (_not implemented yet_) ||

Note that the `!` character has to be escaped in shell commands. For a current full list of all the field names and their meaning, see the output of `rtcontrol --help-fields`.


= Reports =
You might want to add the following alias definitions to your `~/.bashrc`:
{{{
alias rthot="watch -n10 'rtcontrol -rs up,down,name xfer=+0 2>&1'"
alias rtmsg="rtcontrol -s alias,message,name 'message=?*' message=\!*Tried?all?trackers*"
alias rtmsgstats="rtcontrol -q -s alias,message -o alias,message 'message=?*' message=\!*Tried?all?trackers* | uniq -c"
alias rt2days="rtcontrol -scompleted -ocompleted,is_open,up.sz,ratio,alias,name completed=-2d"
}}}

`rthot` shows active torrents every 10 seconds (until you hit CTRL-C), `rtmsg` lists all torrents that have a non-trivial tracker message, `rtmsgstats` prints a count of how many messages there are per unique combination of tracker and message text, and finally `rt2days` gives the completion history of the last 48 hours.


= Statistics =

Create a list of all your trackers and how many torrents are loaded for each:
{{{
rtcontrol -q -o alias -s alias \* | uniq -c
}}}
You can easily modify this by using conditions other than `*`, e.g. show the count of fully seeded downloads using `ratio=+1`.

The total amount of data you have loaded in GB:
{{{
rtcontrol -qosize \* | awk '{ SUM += $1} END { print SUM/1024/1024/1024 }'
}}}

= Performing periodic tasks (cron jobs) =

== Simple Queue Management ==

This is a queue management one-liner (well, logically one line). Before you run it automatically, add a trailing "-n" to test it out, e.g. play with the queue size parameter and check out what would be started. Then put it into a crontab and run it every (few) minute(s).
{{{
export rt_max_start=6; rtcontrol -q --start --yes hash=$(echo $( \
    rtcontrol -qrs is_active -o is_open,hash is_complete=no is_ignored=no \
    | head -n $rt_max_start | grep ^CLS | cut -f2 ) | tr " " ,)
}}}
It works by listing all incomplete downloads that heed commands and sorting the already active ones to the top. Then it looks at the first `rt_max_start` entries and starts any closed ones. 

Note that this means you can exempt items from queue management easily by using the `I` key in the curses interface.


== Move on Completion ==

The following moves completed downloads to another directory (note that you can
restrict this further, e.g. to a specific tracker by using "alias=NAME").
You don't need any multiple watch folders or other prerequisites for this.

Test it first *without the "`| bash`" part* at the end, to make sure it'll in fact do what you intended.
{{{
rtcontrol is_complete=yes 'realpath=!*/completed/*' -qo '
        echo "Moving %(name)s..." \
        && mv -u "%(path)s" ~/completed \
        && ln -s "~/completed/\$(basename "%(path)s")" "%(directory)s"
    ' | bash
}}}
Another advantage is that in case you ever wanted to switch clients, or exchange the drive you host the data on, you can do so easily since all the active downloads still reside at one place in your download directory (in form of a bunch of symlinks).

You can also extend it to create more organized completion structures, e.g. by adding the tracker and the month of completion:
{{{
rtcontrol is_complete=yes 'realpath=!*/completed/*' -qo '
        echo "Moving %(name)s..." \
        && export target="$HOME/completed/%(alias)s/\$(date +"%%Y-%%m")" \
        && mkdir -p $target \
        && mv -u "%(path)s" $target \
        && ln -s "$target/\$(basename "%(path)s")" "%(directory)s"
    ' | bash
}}}


== Ratio Management ==

While rTorrent has a built-in form of ratio management since a few versions, it's hard to use after-the-fact and also hard to understand — you need to have different watch directories and complex settings in your `.rtorrent.rc`.

A basic form of ratio management using `rtcontrol` looks like this:
{{{
rtcontrol is_complete=yes is_open=yes ratio=+1.1 alias=sometracker,othertracker --stop
}}}
You will always want to have the `is_complete=yes is_open=yes ratio=+1.1` part, which excludes all torrents that are still downloading, closed or not having the necessary ratio. 

To that you can add anything you think fits your needs, and also use several commands with different minimum ratios for different trackers by selecting them using `alias` or `tracker`, like in the example above. Assuming you have your original seeds in a directory named `seed` and don't want to ratio-limit them, one thing you might add is `'datapath=!*/seed/*'` to prevent them from being stopped. Only your imagination (and the available fields) are the limit here.

If you then put these commands into a script that runs every few minutes via `cron`, you have a very flexible form of ratio management that can be changed on a whim. 

To complete your command line, you add the action you want to take on the torrents found, in the above example `--stop`. Later versions will also allow you to delete or move your data.


== Bandwidth Management ==

Say you want to have torrents that are already seeded back take a back-seat when other torrents with a ratio less than one are active — but when they're not, all torrents should take full advantage of the available bandwidth. The last part is not possible with the built-in throttle groups, but here's a fix that works by setting the maximum rate on the `seed` throttle dynamically.

Put this into your `.rtorrent.rc`:
{{{
throttle_up=seed,900
}}}

Then extend your crontab with these lines (`crontab -e`):
{{{
RT_SOCKET='eval echo $HOME/rtorrent/.scgi_local'
BW_SEED_MAX=900
BW_SEED_SLOW=200

# Throttle torrents that are seeded in favour of other active ones
*	* * * * 	test -S $($RT_SOCKET) && rtxmlrpc -q throttle_up seed $(test $(rtcontrol -q is_active=1 xfer=+1 throttle=\!seed -ohash | wc -l) -eq 0 && echo $BW_SEED_MAX || echo $BW_SEED_SLOW)

# Put torrents seeded above 1:1 into the seed throttle
*/10	* * * * 	test -S $($RT_SOCKET) && rtcontrol ratio=+1.05 is_complete=1 is_ignored=0 throttle=none -q -T seed --yes
}}}

The `900` and `200` in the above examples are the bandwdith limits in KiB/s, you need to adapt them to your connection of course.


== Other uses of rtcontrol with cron ==

There are other useful commands you can perform on a regular basis, i.e. using a crontab. This one stops any torrent that isn't known by the tracker anymore or has other authorization problems:
{{{
rtcontrol is_open=yes 'message=*not?registered*,*unregistered*,*not?authorized*' --stop
}}}

And the following stops completed torrents that lost their data:
{{{
rtcontrol is_complete=yes is_open=yes is_ghost=yes --stop
}}}
Note that this means you can simply stop torrents by removing their data and calling this command afterwards, either manually or via `cron`.