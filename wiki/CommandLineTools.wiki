#summary PyroScope CLI Tool Overview.
#labels cli,shell
<wiki:toc max_depth="2" />

See QuickStartGuide on how to install these commands on your computer.

= Common Options =

All commands share some common options:
{{{
--version             show program's version number and exit
-h, --help            show this help message and exit
-q, --quiet           Omit informational logging
-v, --verbose         Increase informational logging
}}}

= Commands =

== mktor ==
{{{
mktor [options] <dir-or-file> <tracker-url>

  -p, --private
    Disallow DHT and PEX
  -o PATH, --output-filename=PATH
    Optional file name for the metafile
  -r NAME, --root-name=NAME
    Optional root name (default is basename of the data path)
  -x PATTERN, --exclude=PATTERN
    Exclude files matching a glob pattern from hashing
  --comment=TEXT
    Optional human-readable comment
}}}

`mktor` creates `*.torrent` files (metafiles), given the path to a file or directory and a tracker URL. Optionally, you can also set an additional comment and a different name for the resulting torrent file. Peer exchange and DHT can be disabled by using the `--private` option. 

To exclude files stored on disk from the resulting torrent, use the `--exclude` option to extend the list of standard glob patterns that are ignored. These standard patterns are: `core`, `CVS`, `.*`, `*~`, `*.swp`, `*.tmp`, `*.bak`, `[Tt]humbs.db`, `[Dd]esktop.ini`, and `ehthumbs_vista.db`.

As a unique feature, if you want to change the root directory of the torrent to something different than the basename of the data directory, you can do so with the `--root-name` option. This is especially useful if you have hierarchical paths like `documents/2009/myproject/specs` - normally, all the context information but `specs` would be lost on the receiving side.

If you create several torrents on the same data for different trackers, they're automatically enabled for cross-seeding. For the technically inclined, this is done by adding a unique key so that the info hash is always different.

== lstor ==
`lstor` lists the contents of bittorrent metafiles. The resulting output looks like this:
{{{
NAME pavement.torrent
SIZE 3.6 KiB (0 * 32.0 KiB + 3.6 KiB)
HASH 2D1A7E443D23907E5118FA4A1065CCA191D62C0B
URL  http://example.com/
PRV  NO (DHT/PEX enabled)
TIME 2009-06-06 00:49:52
BY   PyroScope 0.1.1

FILE LISTING
pavement.py                                                             3.6 KiB

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NAME tests.torrent
SIZE 2.6 KiB (0 * 32.0 KiB + 2.6 KiB)
HASH 8E37EB6F4D3807EB26F267D3A9D31C4262530AB2
URL  http://example.com/
PRV  YES (DHT/PEX disabled)
TIME 2009-06-06 00:49:52
BY   PyroScope 0.1.1

FILE LISTING
pyroscope tests/
    test_bencode.py                                                     2.6 KiB
}}}


== chtor ==
{{{
Usage: chtor [options] <metafile>...

Change attributes of a bittorrent metafile.

Options:
  -n, --dry-run         don't write changes to disk, just tell what would
                        happen
  -a URL, --reannounce=URL
                        set a new announce URL
}}}

`chtor` currently is able to change one aspect of a metafile, its announce URL. 
For `rtorrent`, to mass-change the announce URL for a tracker, you would do this:
  * stop `rtorrent`
  * *make a backup of your `*.torrent` files* (`tar cvfz /tmp/metafiles.tgz ./.session ./watch` or similar)
  * `chtor -a http://example.com/new/announce/url watch/*.torrent .session/*.torrent`
  * restart `rtorrent`
 
Note that `chtor` automatically changes only those metafiles whose existing announce URL starts with the scheme and location of the new URL (`http://example.com/` in the above example) and only rewrites metafiles that were actually changed. Changes are first written to a temporary file, which is then renamed.