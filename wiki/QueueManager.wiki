#summary Queue management and house-keeping.
#labels daemon,queue,cli,Featured
<wiki:toc />

*❢YOU NEED TO RUN SVN HEAD FOR THIS! See InstallFromSource❢*

= Introduction =
The queue manager is controlled by the `pyrotorque` daemon command.

*At the moment, run `pyrotorque` manually in a `tmux` or `screen` session _after_ starting rTorrent. There will be some form of auto-start/watchdog later on to run it and keep it alive.*


= Initial setup =

The queue manager daemon needs additional settings, but there are defaults in place, so the detailed explanation in this section can be skipped, if you are OK with these. Go directly to the [#Configuration configuration] in that case.

If you followed the UserConfiguration instructions, the necessary commands are added automatically to your `.rtorrent.rc` using the [https://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/rtorrent-0.8.6.rc configuration include]. Look for the section starting with a `# QUEUE MANAGER` comment near the end, if for whatever reason you need to add these manually.

Also, the PyroScope configuration (located in `~/.pyroscope/config.ini`) needs some additions, namely in the new `[TORQUE]` section. Again, this is covered by [https://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/config.ini defaults], so you only need to take care of that if you want to make any changes.


= Configuration =

The following is a minimal configuration example, only changing a few values from the default:
{{{
...
[TORQUE]
# Queue manager job
job.queue.active = True
job.queue.downloading_max = 3

...
}}}
Note that `downloading_max` counts started but incomplete items including those that ignore commands. See the [https://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/config.ini default configuration] for more parameters and what they mean.
 

= Built-in jobs =
The `QueueManager` is just one kind of job that can be run by `pyrotorque`. It has a built-in scheduler that can run any number of additional jobs, the following sections explain the built-in ones. Since these jobs can be loaded from any available Python package, you can also easily [#Writing_custom_jobs write your own].

Jobs are added in the `[TORQUE]` section, by providing at least the parameters `job.«NAME».handler` and `job.«NAME».schedule`. Depending on the handler, additional parameters can/must be provided (see below for a list of handlers and what they do).

Details on the `schedule` parameter can be found [http://readthedocs.org/docs/apscheduler/en/latest/cronschedule.html here]. Multiple fields must be separated by spaces, so if a field value contains a space, it must be quoted, e.g. «`hour=12 "day=3rd sun"`».
The `handler` parameter tells the system where to look for the job implementation, see the handler descriptions below for the correct values.

== `QueueManager` ==
This is described in detail [#Configuration further up on this page].

== `EngineStats` ==
Runs once per minute, checks the connection to rTorrent, and logs some statistical information.


== `ItemPoller` ==
*TODO* Maintains an updated copy of all rTorrent items, as a service for the other jobs.

== `ActionRule` ==
*TODO* This is `rtcontrol` in form of a house-keeping job, and using this is way more efficient than an equivalent `rtcontrol` cron job; due to that, they can be run a lot more frequently.

== `StatsArchiver` ==
*TODO* Keeps a continuous archive of some statistical values (like bandwidth) so they can later be rendered into graphs.

== `...` ==
*TODO* 


= Writing custom jobs =
*TODO* 