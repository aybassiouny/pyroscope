#summary Queue management and house-keeping.
#labels daemon,queue,cli,Featured
<wiki:toc />

= Introduction =
The queue manager, and other background jobs you can activate, are controlled by the `pyrotorque` daemon command.

<table border="3"><tr><td>
*❢YOU NEED TO RUN SVN HEAD FOR THIS! See InstallFromSource❢*
</td></tr></table><br />


= Initial setup =

The queue manager daemon needs additional settings, but there are defaults in place, so the detailed explanation in this section can be skipped, if you are OK with these. Go directly to the [#Configuration configuration] in that case.

*➽ IMPORTANT: Remember to follow the [MigrationGuide#Migrating_to_version_0.4.3 migration guide] in case you're upgrading an existing installation.*

If you followed the UserConfiguration instructions, the necessary commands are added automatically to your `.rtorrent.rc` using the [https://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/rtorrent-0.8.6.rc configuration include]. Look for the sections starting with a `# TORQUE` comment near the end, if for whatever reason you need to add these manually.

The daemon itself is configured by an additional configuration file `~/.pyroscope/torque.ini` containing the `[TORQUE]` section. Again, this is covered by [https://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/torque.ini defaults], so you only need to take care of that if you want to make any changes.


= Configuration =

The following is a minimal `~/.pyroscope/torque.ini` configuration example, only changing a few values from the default:
{{{
[TORQUE]
# Queue manager job
job.queue.active = True
job.queue.downloading_max = 3
}}}
Having a minimal configuration with just your changes is recommended, so you get new defaults in later releases automatically.

Note that in the above example, `downloading_max` counts started but incomplete items including those that ignore commands. See the [https://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/torque.ini default configuration] for more parameters and what they mean.

After having completed your configuration, you're ready to test it, by following these steps:
 # Execute `rm ~/.pyroscope/run/pyrotorque` to prevent the watchdog from starting the manager in the background.
 # Run `pyrotorque --fg -v` in a terminal, this will start the job scheduler in the foreground with verbose logging directly to that terminal, exactly what you need to check out if your configuration does what you intended. It also helps you to understand what goes on "under the hood".
 # If you changed your configuration, stop the running scheduler by pressing CTRL-C, then restart it. Wash, rinse, repeat.
 # Press CTRL-C for the last time and call `pyrotorque --status`, it should show that no scheduler process is running.
 # Execute `touch ~/.pyroscope/run/pyrotorque` — this creates the guard file again, which must always exist if you want `pyrotorque` to run in the background (otherwise you'll just get an error message on the console or in the log, if you try to launch it).
 # Wait up to 300 seconds, and if your configuration has the `pyro_watchdog` schedule as it should by now, `pyrotorque --status` will show that a scheduler process was automatically started by rTorrent.
 # Enjoy, and check `~/.pyroscope/run/torque.log` for feedback from the daemon process.


= Built-in jobs =
The `QueueManager` is just one kind of job that can be run by `pyrotorque`. It has an embedded scheduler that can run any number of additional jobs, the following sections explain the built-in ones. Since these jobs can be loaded from any available Python package, you can also easily [#Writing_custom_jobs write your own].

Jobs and their configuration are added in the `[TORQUE]` section, by providing at least the parameters `job.«NAME».handler` and `job.«NAME».schedule`. Depending on the handler, additional parameters can/must be provided (see below for a list of handlers and what they do).

Details on the `schedule` parameter can be found [http://readthedocs.org/docs/apscheduler/en/latest/cronschedule.html here]. Multiple fields must be separated by spaces, so if a field value contains a space, it must be quoted, e.g. «`hour=12 "day=3rd sun"`».
The `handler` parameter tells the system where to look for the job implementation, see the handler descriptions below for the correct values.

== `QueueManager` (beta) ==
This is described in detail [#Configuration further up on this page].


== `TreeWatch` (beta) ==
*TODO* `pyrocore.torrent.watch:TreeWatch` watches a folder tree, which can be nested arbitrarily. Loading of new `.torrent` files is immediate (using `libnotify`). Works together with `CompletionHandler` to move data to the partial path the torrent file was loaded from, relative to the tree root.

Each sub-directory can contain a `watch.ini` configuration file for parameters like whether to start new items immediately, and for overriding the completion path.


== `EngineStats` ==
`pyrocore.torrent.jobs:EngineStats` runs once per minute, checks the connection to rTorrent, and logs some statistical information.


== `RemoteWatch` (planned) ==
*TODO* `pyrocore.torrent.watch:RemoteWatch` pools a (S)FTP source for new `.torrent` files, creates a local copy, and loads that into the client.


== `ItemPoller` (planned) ==
*TODO* `pyrocore.torrent.:` maintains an updated copy of all rTorrent items, as a service for the other jobs.


== `ActionRule` (planned) ==
*TODO* `pyrocore.torrent.filter:ActionRule` is `rtcontrol` in form of a house-keeping job, and using this is way more efficient than an equivalent `rtcontrol` cron job; due to that, they can be run a lot more frequently.


== `TorrentMirror` (planned) ==
*TODO* `pyrocore.torrent.filter:TorrentMirror` allows you to transfer a torrent's data from the local client to other remote clients using a specified tracker (at the start, a locally running "bttrack"). In a nutshell, it allows you to transfer any filtered item automatically to a remote location via bittorrent.


== `CompletionHandler` (planned) ==
*TODO* `pyrocore.torrent.:` moves completed data to a target directory, according to flexible rules.


== `StatsArchiver` (planned) ==
*TODO*  `pyrocore.torrent.:` keeps a continuous archive of some statistical values (like bandwidth) so they can later be rendered into graphs.


== `...` ==
*TODO*  `pyrocore.torrent.:` ...


= Writing custom jobs =
*TODO* 