#summary How to add your own custom fields.
#labels configuration

<wiki:toc />

= Introduction =

To add user-defined fields you can put code describing them into your `~/.pyroscope/config.py` file. You can then use your custom field just like any built-in one, e.g. issue a command like `rtcontrol --from-view incomplete \* -qco partial_done,name` (see below examples). They're also listed when you call `rtcontrol --help-fields`.

= Basic custom field code =
The following is the framework you need to add before putting in your field definitions:
{{{
def _custom_fields():
    """ Yield custom field definitions.
    """
    # Import some commonly needed modules
    import os
    from pyrocore.torrent import engine, matching
    from pyrocore.util import fmt

    # PUT CUSTOM FIELD CODE HERE

# Register our factory with the system
custom_field_factories.append(_custom_fields)
}}}

In place of the `# PUT CUSTOM FIELD CODE HERE` comment you can add any combination of the examples below, or your own code.


= Examples =

== Adding rTorrent fields not supported by default ==
{{{
    # Add rTorrent attributes not available by default
    def get_tracker_field(obj, name):
        "Get a field from tracker in focus."
        idx = obj.fetch("tracker_focus") % obj._fields["tracker_size"]
        return getattr(obj._engine._rpc.t, name)(obj._fields["hash"], idx)

    yield engine.OnDemandField(int, "peers_connected", "number of connected peers", matcher=matching.FloatFilter)
    yield engine.DynamicField(int, "seeds", "number of seeds", matcher=matching.FloatFilter,
        accessor=lambda o: get_tracker_field(o, "get_scrape_complete"))
    yield engine.DynamicField(int, "leeches", "number of leeches", matcher=matching.FloatFilter,
        accessor=lambda o: get_tracker_field(o, "get_scrape_incomplete"))
    yield engine.DynamicField(engine.untyped, "lastscraped", "time of last scrape", matcher=matching.TimeFilter,
        accessor=lambda o: get_tracker_field(o, "get_scrape_time_last"), 
        formatter=lambda dt: fmt.human_duration(float(dt), precision=2, short=True))
}}}


== Checking that certain files are present ==
{{{
    # Add file checkers
    def has_nfo(obj):
        "Check for .NFO file."
        pathname = obj.path
        if pathname and os.path.isdir(pathname):
            return any(i.lower().endswith(".nfo") for i in os.listdir(pathname))
        else:
            return False if pathname else None

    def has_thumb(obj):
        "Check for folder.jpg file."
        pathname = obj.path
        if pathname and os.path.isdir(pathname):
            return any(i.lower() == "folder.jpg" for i in os.listdir(pathname))
        else:
            return False if pathname else None

    yield engine.DynamicField(engine.untyped, "has_nfo", "does download have a .NFO file?", 
        matcher=matching.BoolFilter, accessor=has_nfo, 
        formatter=lambda val: "NFO" if val else "!DTA" if val is None else "----")
    yield engine.DynamicField(engine.untyped, "has_thumb", "does download have a folder.jpg file?", 
        matcher=matching.BoolFilter, accessor=has_thumb, 
        formatter=lambda val: "THMB" if val else "!DTA" if val is None else "----")
}}}


== Calculating information about partial downloads ==
{{{
    # Fields for partial downloads
    def partial_info(obj, name):
        "Helper for partial download info"
        try:
            return obj._fields[name]
        except KeyError:
            f_attr = ["get_completed_chunks", "get_size_chunks", "get_range_first", "get_range_second"]
            chunk_size = obj.fetch("chunk_size")
            prev_chunk = -1
            size, completed, chunks = 0, 0, 0
            for f in obj._get_files(f_attr):
                if f.prio: # selected?
                    shared = int(f.range_first == prev_chunk)
                    size += f.size
                    completed += f.completed_chunks - shared
                    chunks += f.size_chunks - shared
                    prev_chunk = f.range_second - 1

            obj._fields["partial_size"] = size
            obj._fields["partial_missing"] = (chunks - completed) * chunk_size
            obj._fields["partial_done"] = 100.0 * completed / chunks if chunks else 0.0

            return obj._fields[name]

    yield engine.DynamicField(int, "partial_size", "bytes selected for download", 
        matcher=matching.ByteSizeFilter,
        accessor=lambda o: partial_info(o, "partial_size"))
    yield engine.DynamicField(int, "partial_missing", "bytes missing from selected chunks", 
        matcher=matching.ByteSizeFilter,
        accessor=lambda o: partial_info(o, "partial_missing"))
    yield engine.DynamicField(float, "partial_done", "percent complete of selected chunks", 
        matcher=matching.FloatFilter,
        accessor=lambda o: partial_info(o, "partial_done"))
}}}