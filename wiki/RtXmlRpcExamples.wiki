#summary Real-world use-cases for rtxmlrpc.
#labels shell,cli,xmlrpc
<wiki:toc max_depth="2" />

= Querying system information =
The `rtuptime` script shows you essential information about your rTorrent instance:
{{{
#! /bin/bash
SCGI_SOCKET=~/bt/rtorrent/.scgi_local

if test ! -S $SCGI_SOCKET; then
    echo >&2 "rTorrent is not running (no socket $SCGI_SOCKET)"
    exit 1
fi

echo -n rTorrent $(rtxmlrpc system.client_version)/$(rtxmlrpc system.library_version)
echo -n , up $(rtxmlrpc to_elapsed_time $(ls -l --time-style '+%s' $SCGI_SOCKET | awk '{print $6}'))
echo -n , D:$(rtxmlrpc to_mb $(rtxmlrpc get_down_total)) MiB
echo -n \ @ $(rtxmlrpc to_kb $(rtxmlrpc get_down_rate)) 
echo -n \ / $(rtxmlrpc to_kb $(rtxmlrpc get_download_rate)) KiB/s
echo -n , U:$(rtxmlrpc to_mb $(rtxmlrpc get_up_total)) MiB
echo -n \ @ $(rtxmlrpc to_kb $(rtxmlrpc get_up_rate)) 
echo -n \ / $(rtxmlrpc to_kb $(rtxmlrpc get_upload_rate)) KiB/s
echo
}}}

When called, it prints something like this:
{{{
$ rtuptime
rTorrent 0.8.6/0.12.6, up 24:49:38, D: 42,3 MiB @ 0,1 / 666,0 KiB/s, U: 42,2 MiB @ 42,1 / 42,2 KiB/s
}}}
And yes, doing the same in a Python script would be much more CPU efficient. ;)


= General Maintenance Tasks =
Here are some commands that can help with managing your rTorrent instance:
{{{
# Flush ALL session data NOW, use this before you make a backup of your session directory
rtxmlrpc d.multicall main d.save_session=
# [[1], [1], ..., [1]]
}}}


= Setting and checking throttles =
To set the speed of the `slow` throttle, and then check your new limit and print the current download rate, use:
{{{
rtxmlrpc throttle_down slow 120
# 0
rtxmlrpc get_throttle_down_max slow 
# 122880
rtxmlrpc get_throttle_down_rate slow 
# 0
}}}
Note that the speed is specified in KiB/s as a string when setting it but returned in bytes/s as an integer on queries.


= Global throttling when other computers are up =
If you want to be loved by your house-mates, try this:
{{{
#! /bin/bash
# Throttle bittorrent when certain hosts are up

#
# CONFIGURATION
#
hosts_to_check="mom dad"
full_up=62
full_down=620
nice_up=42
nice_down=123

#
# HERE BE DRAGONS!
#

# Check in any prioritized hosts are up
throttle=false
for host in $hosts_to_check; do
    if ping -c1 $host >/dev/null 2>&1; then
        throttle=true
    fi
done

if $throttle; then
    up=$nice_up
    down=$nice_down
else
    up=$full_up
    down=$full_down
fi

# Set chosen bandwidth
rtxmlrpc -q set_upload_rate $(( $up * 1024 ))
rtxmlrpc -q set_download_rate $(( $down * 1024 ))
}}}